// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/fi-ts/s3-go/pkg/apis/v1"
)

// S3ControllerUserServiceClient is an autogenerated mock type for the S3ControllerUserServiceClient type
type S3ControllerUserServiceClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *S3ControllerUserServiceClient) Create(ctx context.Context, in *v1.S3ControllerUserCreate, opts ...grpc.CallOption) (*v1.S3ControllerUserWithCredentials, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.S3ControllerUserWithCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserCreate, ...grpc.CallOption) (*v1.S3ControllerUserWithCredentials, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserCreate, ...grpc.CallOption) *v1.S3ControllerUserWithCredentials); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3ControllerUserWithCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.S3ControllerUserCreate, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *S3ControllerUserServiceClient) Delete(ctx context.Context, in *v1.S3ControllerUserDelete, opts ...grpc.CallOption) (*v1.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserDelete, ...grpc.CallOption) (*v1.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserDelete, ...grpc.CallOption) *v1.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.S3ControllerUserDelete, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *S3ControllerUserServiceClient) Get(ctx context.Context, in *v1.S3ControllerUser, opts ...grpc.CallOption) (*v1.S3ControllerUserWithCredentials, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.S3ControllerUserWithCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUser, ...grpc.CallOption) (*v1.S3ControllerUserWithCredentials, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUser, ...grpc.CallOption) *v1.S3ControllerUserWithCredentials); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3ControllerUserWithCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.S3ControllerUser, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *S3ControllerUserServiceClient) List(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.S3ControllerUserList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.S3ControllerUserList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Empty, ...grpc.CallOption) (*v1.S3ControllerUserList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Empty, ...grpc.CallOption) *v1.S3ControllerUserList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3ControllerUserList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *S3ControllerUserServiceClient) Update(ctx context.Context, in *v1.S3ControllerUserUpdate, opts ...grpc.CallOption) (*v1.S3ControllerUserWithCredentials, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.S3ControllerUserWithCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserUpdate, ...grpc.CallOption) (*v1.S3ControllerUserWithCredentials, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserUpdate, ...grpc.CallOption) *v1.S3ControllerUserWithCredentials); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3ControllerUserWithCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.S3ControllerUserUpdate, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewS3ControllerUserServiceClient creates a new instance of S3ControllerUserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3ControllerUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3ControllerUserServiceClient {
	mock := &S3ControllerUserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
