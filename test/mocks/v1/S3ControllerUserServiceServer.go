// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/fi-ts/s3-go/pkg/apis/v1"
	mock "github.com/stretchr/testify/mock"
)

// S3ControllerUserServiceServer is an autogenerated mock type for the S3ControllerUserServiceServer type
type S3ControllerUserServiceServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *S3ControllerUserServiceServer) Create(_a0 context.Context, _a1 *v1.S3ControllerUserCreate) (*v1.S3ControllerUserWithCredentials, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.S3ControllerUserWithCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserCreate) (*v1.S3ControllerUserWithCredentials, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserCreate) *v1.S3ControllerUserWithCredentials); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3ControllerUserWithCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.S3ControllerUserCreate) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *S3ControllerUserServiceServer) Delete(_a0 context.Context, _a1 *v1.S3ControllerUserDelete) (*v1.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserDelete) (*v1.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserDelete) *v1.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.S3ControllerUserDelete) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *S3ControllerUserServiceServer) Get(_a0 context.Context, _a1 *v1.S3ControllerUser) (*v1.S3ControllerUserWithCredentials, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.S3ControllerUserWithCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUser) (*v1.S3ControllerUserWithCredentials, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUser) *v1.S3ControllerUserWithCredentials); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3ControllerUserWithCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.S3ControllerUser) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *S3ControllerUserServiceServer) List(_a0 context.Context, _a1 *v1.Empty) (*v1.S3ControllerUserList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.S3ControllerUserList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Empty) (*v1.S3ControllerUserList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Empty) *v1.S3ControllerUserList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3ControllerUserList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *S3ControllerUserServiceServer) Update(_a0 context.Context, _a1 *v1.S3ControllerUserUpdate) (*v1.S3ControllerUserWithCredentials, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.S3ControllerUserWithCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserUpdate) (*v1.S3ControllerUserWithCredentials, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.S3ControllerUserUpdate) *v1.S3ControllerUserWithCredentials); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3ControllerUserWithCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.S3ControllerUserUpdate) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewS3ControllerUserServiceServer creates a new instance of S3ControllerUserServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3ControllerUserServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3ControllerUserServiceServer {
	mock := &S3ControllerUserServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
