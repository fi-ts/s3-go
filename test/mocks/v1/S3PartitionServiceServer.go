// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/fi-ts/s3-go/pkg/apis/v1"
	mock "github.com/stretchr/testify/mock"
)

// S3PartitionServiceServer is an autogenerated mock type for the S3PartitionServiceServer type
type S3PartitionServiceServer struct {
	mock.Mock
}

// List provides a mock function with given fields: _a0, _a1
func (_m *S3PartitionServiceServer) List(_a0 context.Context, _a1 *v1.Empty) (*v1.S3PartitionListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.S3PartitionListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Empty) (*v1.S3PartitionListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Empty) *v1.S3PartitionListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.S3PartitionListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewS3PartitionServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewS3PartitionServiceServer creates a new instance of S3PartitionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewS3PartitionServiceServer(t mockConstructorTestingTNewS3PartitionServiceServer) *S3PartitionServiceServer {
	mock := &S3PartitionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
