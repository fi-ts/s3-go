// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S3PartitionServiceClient is the client API for S3PartitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3PartitionServiceClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*S3PartitionListResponse, error)
}

type s3PartitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS3PartitionServiceClient(cc grpc.ClientConnInterface) S3PartitionServiceClient {
	return &s3PartitionServiceClient{cc}
}

func (c *s3PartitionServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*S3PartitionListResponse, error) {
	out := new(S3PartitionListResponse)
	err := c.cc.Invoke(ctx, "/metalstack.io.s3.api.v1.S3PartitionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3PartitionServiceServer is the server API for S3PartitionService service.
// All implementations should embed UnimplementedS3PartitionServiceServer
// for forward compatibility
type S3PartitionServiceServer interface {
	List(context.Context, *Empty) (*S3PartitionListResponse, error)
}

// UnimplementedS3PartitionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedS3PartitionServiceServer struct {
}

func (UnimplementedS3PartitionServiceServer) List(context.Context, *Empty) (*S3PartitionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeS3PartitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3PartitionServiceServer will
// result in compilation errors.
type UnsafeS3PartitionServiceServer interface {
	mustEmbedUnimplementedS3PartitionServiceServer()
}

func RegisterS3PartitionServiceServer(s grpc.ServiceRegistrar, srv S3PartitionServiceServer) {
	s.RegisterService(&S3PartitionService_ServiceDesc, srv)
}

func _S3PartitionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3PartitionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metalstack.io.s3.api.v1.S3PartitionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3PartitionServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// S3PartitionService_ServiceDesc is the grpc.ServiceDesc for S3PartitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3PartitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metalstack.io.s3.api.v1.S3PartitionService",
	HandlerType: (*S3PartitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _S3PartitionService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metalstack/io/s3/api/v1/partition.proto",
}
